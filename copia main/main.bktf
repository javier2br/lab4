provider "aws" {
  region = var.aws_region
}

# ✅ Crear VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

# ✅ Crear Subred en AZ1
resource "aws_subnet" "subnet_az1" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "${var.aws_region}a"
  map_public_ip_on_launch = true
}

# ✅ Crear Subred en AZ2
resource "aws_subnet" "subnet_az2" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "${var.aws_region}b"
  map_public_ip_on_launch = true
}

# ✅ Subnet Group para RDS (necesita al menos 2 AZs)
resource "aws_db_subnet_group" "my_subnet_group" {
  name       = "my-subnet-group"
  subnet_ids = [aws_subnet.subnet_az1.id, aws_subnet.subnet_az2.id]

  tags = {
    Name = "MyDBSubnetGroup"
  }
}






# ✅ Security Group para EC2 y RDS
resource "aws_security_group" "allow_all" {
  vpc_id = aws_vpc.my_vpc.id

  # Permitir tráfico SSH solo desde SSM (bloqueamos el acceso externo por SSH)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["127.0.0.1/32"]
  }

  # Permitir tráfico a RDS desde la VPC
  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  # Salida sin restricciones
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ✅ Crear Role IAM para SSM
resource "aws_iam_role" "ssm_role" {
  name = "EC2SSMRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action    = "sts:AssumeRole"
      Effect    = "Allow"
      Principal = { Service = "ec2.amazonaws.com" }
    }]
  })
}

# ✅ Adjuntar permisos de SSM al Role
resource "aws_iam_policy_attachment" "ssm_attach" {
  name       = "ssm-policy-attachment"
  roles      = [aws_iam_role.ssm_role.name]
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# ✅ Crear Perfil IAM y adjuntar el role a EC2
resource "aws_iam_instance_profile" "ssm_profile" {
  name = "ssm-instance-profile"
  role = aws_iam_role.ssm_role.name
}

# ✅ Instancia EC2 con Docker y conexión a RDS
resource "aws_instance" "my_ec2" {
  ami                  = var.ami
  instance_type        = var.instance_type
  subnet_id           = aws_subnet.subnet_az1.id
  vpc_security_group_ids    = [aws_security_group.allow_all.id]
  iam_instance_profile = aws_iam_instance_profile.ssm_profile.name

  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y docker
              service docker start
              usermod -aG docker ec2-user

              # Instalar AWS CLI y SSM Agent (viene preinstalado en Amazon Linux 2)
              yum install -y amazon-ssm-agent
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              # Instalar Docker Compose
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose

              # Obtener el endpoint de la base de datos desde Terraform
              RDS_ENDPOINT="${aws_db_instance.my_rds.endpoint}"
              
              # Ejecutar un contenedor Docker con MySQL como backend
              docker run -d --name myapp -e DB_HOST=$RDS_ENDPOINT -e DB_USER=${var.db_username} -e DB_PASS=${var.db_password} myapp-image
              EOF

  tags = {
    Name = "MyEC2Instance"
  }
}

# ✅ Crear RDS MySQL
resource "aws_db_instance" "my_rds" {
  allocated_storage    = 20
  engine              = "mysql"
  engine_version      = "8.0"
  instance_class      = "db.t3.micro"
  username           = var.db_username
  password           = var.db_password
  publicly_accessible = false
  skip_final_snapshot = true
  vpc_security_group_ids = [aws_security_group.allow_all.id]
  db_subnet_group_name = aws_db_subnet_group.my_subnet_group.name
}
/*
# ✅ Subnet Group para RDS
resource "aws_db_subnet_group" "my_subnet_group" {
  name       = "my-subnet-group"
  subnet_ids = [aws_subnet.my_subnet2.id]
}

*/

resource "aws_organization_account" "my_account" {
  name = "my_account"
  email = "my_account@my_account.com"
  role_name = "OrganizationAccountAccessRole"
 close_on_delete = true    # Cerrar la cuenta al eliminarla  REVISAR QUE PUEDE SER DELETION  
  iam_user_access_to_billing = "ALLOW"
  tags = {
    Name = "MyAccount"
  }
}
