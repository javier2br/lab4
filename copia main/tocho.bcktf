terraform {
  backend "s3" {
    bucket         = "lockid-backend"
    key            = "terraform.tfstate"
    region         = "eu-west-3"
    dynamodb_table = "terraform_state"

  }
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">3.0"
    }
  }
}

provider "aws" {
  region  = "eu-west-3"
  profile = "default"

}

#    CREACION DE LA INFRAESTRUCTURA 
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name        = "Main-VPC"
    Environment = "LAB4"

  }
}

resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "eu-west-3a"

  tags = {
    Name        = "Public-Subnet-1"
    Environment = "LAB4"

  }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "eu-west-3b"

  tags = {
    Name        = "Public-Subnet-2"
    Environment = "LAB4"

  }
}

resource "aws_subnet" "private_subnet_1" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = "eu-west-3a"

  tags = {
    Name        = "Private-Subnet-1"
    Environment = "LAB4"

  }
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "eu-west-3b"

  tags = {
    Name        = "Private-Subnet-2"
    Environment = "LAB4"

  }
}

## CREACION DE LAS TABLAS DE RUTAS Y ASOCIACIONES DE LAS SUBREDES PUBLICAS

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name        = "Public-Route-Table"
    Environment = "LAB4"
  }
}

resource "aws_route_table_association" "public_subnet_1" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_subnet_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public_rt.id
}

## CREACION IGW Y ASOCIACION A LA VPC

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name        = "Internet-Gateway"
    Environment = "LAB4"

  }
}

resource "aws_eip" "nat_eip" {
  domain = "vpc"

  tags = {
    Name        = "NAT-EIP"
    Environment = "LAB4"

  }
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet_1.id

  tags = {
    Name        = "NAT-Gateway"
    Environment = "LAB4"

  }
}
#  Route Table Privada
resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = {
    Name        = "Private-Route-Table"
    Environment = "LAB4"

  }
}

resource "aws_route_table_association" "private_subnet_1" {
  subnet_id      = aws_subnet.private_subnet_1.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "private_subnet_2" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private_rt.id
}

#  Security GroupS
# - Security Group para Instancias Web

resource "aws_security_group" "web_sg" {
  vpc_id = aws_vpc.main.id

  # Permitir tráfico HTTP/HTTPS desde cualquier parte del mundo
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  # Permitir todo el tráfico de salida
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "Web-SG"
    Environment = "LAB4"
  }
}

# - Security Group para RDS PostgreSQL

resource "aws_security_group" "rds_sg" {
  vpc_id = aws_vpc.main.id

  # Permitir conexiones desde las instancias web o ECS Tasks (puerto 5432)
  ingress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "RDS-SG"
    Environment = "LAB4"
  }
}

# - Security Group para Redis (ElastiCache)

resource "aws_security_group" "cache_sg" {
  vpc_id = aws_vpc.main.id

  # Permitir conexiones en el puerto 6379 (Redis) solo desde el SG de instancias web
  ingress {
    from_port       = 6379
    to_port         = 6379
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "Cache-SG"
    Environment = "LAB4"
  }
}
#   - Security Group para Load Balancer
resource "aws_security_group" "alb_sg" {
  vpc_id = aws_vpc.main.id

  # Permitir tráfico HTTP y HTTPS desde cualquier parte del mundo
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Permitir tráfico hacia instancias web
  egress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  egress {
    from_port       = 443
    to_port         = 443
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  tags = {
    Name        = "ALB-SG"
    Environment = "LAB4"
  }
}

#   Terraform - Creación de un Secreto
resource "aws_secretsmanager_secret" "rds_secret" {
  name = "rds-credentials"

  tags = {
    Name = "RDS Secret"
  }
}

resource "aws_secretsmanager_secret_version" "rds_secret_version" {
  secret_id = aws_secretsmanager_secret.rds_secret.id
  secret_string = jsonencode({
    username = "admin"
    password = "SuperSecurePassword123!"
    engine   = "postgres"
    host     = aws_db_instance.main.address
    port     = 5432
  })
}
###     IAM IAM IAM  IAM 

#     - IAM Role para Instancias Web
resource "aws_iam_role" "web_role" {
  name = "WebServerRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "web_policy" {
  name        = "WebServerPolicy"
  description = "Permisos para acceder a S3, CloudWatch y Secrets Manager"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["secretsmanager:GetSecretValue"]
        Effect   = "Allow"
        Resource = aws_secretsmanager_secret.rds_secret.arn
      },
      {
        Action   = ["s3:GetObject", "s3:PutObject"]
        Effect   = "Allow"
        Resource = "arn:aws:s3:::my-bucket-name/*"
      },
      {
        Action   = ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "web_attach" {
  role       = aws_iam_role.web_role.name
  policy_arn = aws_iam_policy.web_policy.arn
}

resource "aws_iam_instance_profile" "web_instance_profile" {
  name = "WebInstanceProfile"
  role = aws_iam_role.web_role.name
}

###- Creación de Subnet Group para RDS  (Se debe ubicar en subnets privadas dentro de un Subnet Group.)
resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]

  tags = {
    Name        = "RDS Subnet Group"
    Environment = "LAB4"
  }
}
### - Creación de RDS PostgreSQL
resource "aws_db_instance" "rds_postgres" {
  identifier            = "my-rds-instance"
  engine                = "postgres"
  engine_version        = "14.3"
  instance_class        = "db.t3.micro"
  allocated_storage     = 20
  max_allocated_storage = 100
  storage_type          = "gp2"
  storage_encrypted     = true

  db_name                = "cms_db"
  username               = "admin"
  password               = aws_secretsmanager_secret_version.rds_secret_version.secret_string["password"]
  multi_az               = true
  publicly_accessible    = false
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name

  backup_retention_period = 7
  backup_window           = "03:00-04:00"
  maintenance_window      = "Mon:04:00-Mon:05:00"

  tags = {
    Name        = "PostgreSQL-RDS"
    Environment = "LAB4"

  }
}

##  Gestión de Credenciales con AWS Secrets Manager  rds_secret_version

########## repetido en la parte de arriba ############################

/*resource "aws_secretsmanager_secret" "rds_secret" {
  name = "rds-credentials"
}

resource "aws_secretsmanager_secret_version" "rds_secret_version" {
  secret_id = aws_secretsmanager_secret.rds_secret.id
  secret_string = jsonencode({
    username = "admin"
    password = "SuperSecurePassword123!"
    engine   = "postgres"
    host     = aws_db_instance.rds_postgres.address
    port     = 5432
  })
}
*/
## - Creación del Subnet Group para ElastiCache
resource "aws_elasticache_subnet_group" "cache_subnet_group" {
  name       = "cache-subnet-group"
  subnet_ids = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
}

## - Creación de ElastiCache Redis
/*resource "aws_elasticache_cluster" "cache_redis" {
  cluster_id           = "my-redis-cluster"
  engine               = "redis"
  engine_version       = "6.x"
  node_type            = "cache.t3.micro"
  num_cache_nodes      = 1
  port                 = 6379
  parameter_group_name = "default.redis6.x"
  subnet_group_name    = aws_elasticache_subnet_group.cache_subnet_group.name

  tags = {
    Name = "Redis-Cache"
    Environment = "LAB4"
  }
}
*/
## - Creación de Redis OTRA VERSION ??? PROBAR ESTA PRIMERAMENTE
resource "aws_elasticache_cluster" "redis" {
  cluster_id           = "my-redis-cluster"
  engine               = "redis"
  node_type            = "cache.t3.micro"
  num_cache_nodes      = 1
  parameter_group_name = "default.redis7"
  subnet_group_name    = aws_elasticache_subnet_group.cache_subnet_group.name
  security_group_ids   = [aws_security_group.cache_sg.id]

  tags = {
    Name        = "Redis-Cluster"
    Environment = "LAB4"
  }
}

##- Creación del EFS
resource "aws_efs_file_system" "cms_efs" {
  creation_token = "efs-token"
  encrypted      = true

  tags = {
    Name        = "CMS-EFS"
    Environment = "LAB4"
  }
}

##- Creación de Mount Targets en Subnets Privadas
resource "aws_efs_mount_target" "mt1" {
  file_system_id  = aws_efs_file_system.cms_efs.id
  subnet_id       = aws_subnet.private_subnet_1.id
  security_groups = [aws_security_group.web_sg.id]
}

resource "aws_efs_mount_target" "mt2" {
  file_system_id  = aws_efs_file_system.cms_efs.id
  subnet_id       = aws_subnet.private_subnet_2.id
  security_groups = [aws_security_group.web_sg.id]
}

## Configuración del Bucket S3 para Almacenamiento de imágenes y contenido estático.
resource "aws_s3_bucket" "cms_bucket" {
  bucket = "my-cms-bucket"
}

resource "aws_s3_bucket_public_access_block" "cms_bucket_access" {
  bucket = aws_s3_bucket.cms_bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_policy" "cms_bucket_policy" {
  bucket = aws_s3_bucket.cms_bucket.id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = "*",
      Action    = "s3:GetObject",
      Resource  = "arn:aws:s3:::my-cms-bucket/*"
    }]
  })
}

###  CloudWatch para RDS
resource "aws_cloudwatch_metric_alarm" "rds_cpu_alarm" {
  alarm_name          = "rds-cpu-high"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/RDS"
  period              = 300
  statistic           = "Average"
  threshold           = 80
  alarm_description   = "Alerta si la CPU de RDS supera el 80%."
  alarm_actions       = [aws_sns_topic.alerts.arn]

  dimensions = {
    DBInstanceIdentifier = aws_db_instance.rds_postgres.id
  }
}

## - Crear el ALB
resource "aws_lb" "web_alb" {
  name               = "web-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]

  enable_deletion_protection = false

  tags = {
    Name        = "Web-ALB"
    Environment = "LAB4"
  }
}

#### Crear Target Group con conversion de HTTP a HTTPS 
resource "aws_lb_target_group" "web_tg_http" {
  name        = "web-target-group-http"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.main.id
  target_type = "instance" # O "ip" para ECS con Fargate

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 2
    matcher             = "200-399"
  }

  tags = {
    Name = "Web-TG-HTTP"
  }
}


resource "aws_lb_target_group" "web_tg_https" {
  name        = "web-target-group-https"
  port        = 443
  protocol    = "HTTPS"
  vpc_id      = aws_vpc.main.id
  target_type = "instance" # O "ip" para ECS con Fargate

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 2
    matcher             = "200-399"
  }

  tags = {
    Name = "Web-TG-HTTPS"
  }
}

## - Crear Listener para HTTP y HTTPS
resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

/*
resource "aws_lb_listener" "https_listener" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = aws_acm_certificate.web_cert.arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg_https.arn
  }
}
*/
############### certificado SSL creado en AWS Certificate Manager   ############################
resource "aws_acm_certificate" "web_cert" {
  domain_name               = "lab4.com"
  validation_method         = "DNS"
  subject_alternative_names = ["www.lab4.com"]
  tags = {
    Name        = "Web-Cert"
    Environment = "LAB4"
  }
}

resource "aws_lb_listener" "https_listener" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = aws_acm_certificate.web_cert.arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}


######## PARA PROBAR EL PUERTO 80 SIN CIFRAR SI FUNCIONA EL REDIRECCIONAMIENTO, QUITAR EN PRODUCCION ######## 

resource "aws_lb_listener" "http_listener_direct" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}

############  Creación del Launch Template

resource "aws_launch_template" "web_lt" {
  name          = "web-launch-template"
  image_id      = "ami-00c589b38b4ec4597" # AMI de Amazon Linux 2 
  instance_type = "t2.micro"
  key_name      = "my-keypair"

  network_interfaces {
    associate_public_ip_address = false
    security_groups             = [aws_security_group.web_sg.id]
  }

  user_data = base64encode(<<-EOF
              #!/bin/bash
              yum update -y
              amazon-linux-extras enable php8.0
              yum install -y httpd php php-mysqlnd
              systemctl start httpd
              systemctl enable httpd
              echo "<?php phpinfo(); ?>" > /var/www/html/index.php
              EOF
  )

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name        = "Web-Instance"
      Environment = "LAB4"
    }
  }
}

############## Creación de Auto Scaling Group

resource "aws_autoscaling_group" "web_asg" {
  vpc_zone_identifier       = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
  desired_capacity          = 2
  min_size                  = 2
  max_size                  = 3
  health_check_type         = "EC2"
  health_check_grace_period = 300

  launch_template {
    id      = aws_launch_template.web_lt.id
    version = "$Latest"
  }

  target_group_arns = [aws_lb_target_group.web_tg.arn]

  tag {
    key                 = "Name"
    value               = "Web-ASG-Instance"
    propagate_at_launch = true
  }
}

######   4.7 Configuración de Auto Scaling basado en CPU
resource "aws_autoscaling_policy" "cpu_scaling" {
  name                   = "cpu-scaling-policy"
  autoscaling_group_name = aws_autoscaling_group.web_asg.name
  adjustment_type        = "ChangeInCapacity"
  scaling_adjustment     = 1
  cooldown               = 60
}

resource "aws_cloudwatch_metric_alarm" "cpu_high" {
  alarm_name          = "cpu-high-alarm"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = 2
  metric_name         = "CPUUtilization"
  namespace           = "AWS/EC2"
  period              = 60
  statistic           = "Average"
  threshold           = 75
  alarm_description   = "Escala cuando la CPU supera el 75%."
  alarm_actions       = [aws_autoscaling_policy.cpu_scaling.arn]

  dimensions = {
    AutoScalingGroupName = aws_autoscaling_group.web_asg.name
  }
}

#### 4.8 Monitoreo con CloudWatch Logs

resource "aws_cloudwatch_log_group" "web_logs" {
  name              = "/var/log/httpd/access.log"
  retention_in_days = 7
}

###  IAM role clwctwch

resource "aws_iam_role" "web_log_role" {
  name = "WebLogRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy" "web_log_policy" {
  name = "WebLogPolicy"
  role = aws_iam_role.web_log_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action   = ["logs:CreateLogStream", "logs:PutLogEvents"]
      Effect   = "Allow"
      Resource = "*"
    }]
  })
}

resource "aws_iam_instance_profile" "web_log_profile" {
  name = "WebLogProfile"
  role = aws_iam_role.web_log_role.name
}

